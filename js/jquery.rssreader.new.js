// Generated by CoffeeScript 1.10.0
(function() {
  (function($) {
    var _formatDate, _formatDigit, _formatFilesize, _getLapsedTime, _getMonthName, _getXMLDocument, _process;
    _process = function(e, data, options) {
      var content;
      var pubDate;
      var content, entry, entryDate, feedLink, feeds, html, i, pubDate, row, rowArray, rowIndex;
      feeds = data.feed;
      rowArray = [];
      rowIndex = 0;
      html = '';
      row = void 0;
      if (!feeds) {
        return false;
      }
      if (options.header) {
        html += '<div class="rssHeader">' + '<a href="' + feeds.link + '">' + feeds.title + '</a>' + '</div>';
      }
      html += '<div class="rssBody">' + '<ul>';
      i = options.offset;
      while (i < feeds.entries.length) {
        rowIndex = i - options.offset;
        rowArray[rowIndex] = [];
        entry = feeds.entries[i];
        pubDate = void 0;
        feedLink = entry.link;
        if (entry.publishedDate) {
          entryDate = new Date(entry.publishedDate);
          pubDate = entryDate.toLocaleDateString() + ' ' + entryDate.toLocaleTimeString();
        }
        if (options.linkredirect) {
          feedLink = encodeURIComponent(feedLink);
        }
        rowArray[rowIndex]['html'] = '<' + options.titletag + '><a href="' + options.linkredirect + feedLink + '" title=" ' + feeds.title + '">' + entry.title + '</a></' + options.titletag + '>';
        if (options.date && pubDate) {
          rowArray[rowIndex]['html'] += '<time>' + pubDate + '</time>';
        }
        if (options.content) {
          if (options.snippet && entry.contentSnippet !== '') {
            content = entry.contentSnippet;
          } else {
            content = entry.content;
          }
          rowArray[rowIndex]['html'] += '<p>' + content + '</p>';
        }
        i++;
      }
      $.each(rowArray, function(e) {
        html += '<li class="rssRow">' + rowArray[e]['html'] + '</li>';
      });
      html += '</ul>' + '</div>';
      $(e).html(html);
      $('a', e).attr('target', options.linktarget);
    };
    _formatFilesize = function(bytes) {
      var e, s;
      s = ['bytes', 'kb', 'MB', 'GB', 'TB', 'PB'];
      e = Math.floor(Math.log(bytes) / Math.log(1024));
      return (bytes / Math.pow(1024, Math.floor(e))).toFixed(2) + ' ' + s[e];
    };
    _formatDate = function(date, mask) {
      var fmtDate;
      fmtDate = new Date(date);
      date = mask;
      date = date.replace('dd', _formatDigit(fmtDate.getDate()));
      date = date.replace('MMMM', _getMonthName(fmtDate.getMonth()));
      date = date.replace('MM', _formatDigit(fmtDate.getMonth() + 1));
      date = date.replace('yyyy', fmtDate.getFullYear());
      date = date.replace('hh', _formatDigit(fmtDate.getHours()));
      date = date.replace('mm', _formatDigit(fmtDate.getMinutes()));
      date = date.replace('ss', _formatDigit(fmtDate.getSeconds()));
      return date;
    };
    _formatDigit = function(digit) {
      digit += '';
      if (digit.length < 2) {
        digit = '0' + digit;
      }
      return digit;
    };
    _getMonthName = function(month) {
      var name;
      name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      return name[month];
    };
    _getXMLDocument = function(str) {
      var browser, xml;
      browser = navigator.appName;
      xml = void 0;
      if (browser === 'Microsoft Internet Explorer') {
        xml = new ActiveXObject('Microsoft.XMLDOM');
        xml.async = false;
        xml.loadXML(str);
      } else {
        xml = (new DOMParser).parseFromString(str, 'text/xml');
      }
      return xml;
    };
    _getLapsedTime = function(date) {
      var u;
      var t;
      var u;
      var t;
      var u;
      var t;
      var lapsedTime, pastDate, t, todayDate, u;
      todayDate = new Date;
      pastDate = new Date(date);
      lapsedTime = Math.round((todayDate.getTime() - pastDate.getTime()) / 1000);
      if (lapsedTime < 60) {
        return '< 1 min';
      } else if (lapsedTime < 60 * 60) {
        t = Math.round(lapsedTime / 60) - 1;
        u = 'min';
      } else if (lapsedTime < 24 * 60 * 60) {
        t = Math.round(lapsedTime / 3600) - 1;
        u = 'hour';
      } else if (lapsedTime < 7 * 24 * 60 * 60) {
        t = Math.round(lapsedTime / 86400) - 1;
        u = 'day';
      } else {
        t = Math.round(lapsedTime / 604800) - 1;
        u = 'week';
      }
      if (t > 1) {
        u += 's';
      }
      return t + ' ' + u;
    };
    $.fn.rssreader = function(url, options, fn) {
      var options;
      options = $.extend({
        limit: 10,
        offset: 1,
        header: true,
        titletag: 'h4',
        date: true,
        content: true,
        snippet: true,
        showerror: true,
        errormsg: '',
        linktarget: '_blank',
        linkredirect: ''
      }, options);
      return this.each(function(i, e) {
        var api, apiUrl, s;
        s = '';
        if (!$(e).hasClass('rssreader')) {
          $(e).addClass('rssreader');
        }
        if (url === null) {
          return false;
        }
        apiUrl = 'http://ajax.googleapis.com/ajax/services/feed/load?v=1.0&callback=?&q=';
        api = apiUrl + encodeURIComponent(url) + '&num=' + options.limit + '&output=json_xml';
        $.getJSON(api, function(data) {
          var msg;
          var msg;
          if (data.responseStatus === 200) {
            _process(e, data.responseData, options);
            if ($.isFunction(fn)) {
              fn.call(this, $(e));
            }
          } else {
            if (options.showerror) {
              if (options.errormsg !== '') {
                msg = options.errormsg;
              } else {
                msg = data.responseDetails;
              }
            }
            $(e).html('<div class="rssError"><p>' + msg + '</p></div>');
          }
        });
      });
    };
  })(jQuery);

}).call(this);
